plugins {
    id 'application'
    id 'de.jjohannes.extra-java-module-info' version '0.11'
}

version = '1.0-SNAPSHOT'

repositories {
    mavenCentral()
}

dependencies {
    testImplementation(platform('org.junit:junit-bom:5.8.2'))
    testImplementation('org.junit.jupiter:junit-jupiter')

    implementation('org.slf4j:slf4j-api:1.7.36') {
        because('Need to using logger')
    }
    implementation('org.slf4j:slf4j-reload4j:1.7.36') {
        because('To use Reload4J with slf4j')
    }
    implementation('ch.qos.reload4j:reload4j:1.2.21') {
        because('Reload4J logger')
    }

    implementation('com.beust:jcommander:1.82') {
        because('Need to parse commandline arguments')
    }

    implementation('com.googlecode.lanterna:lanterna:3.1.1') {
        because('CLI')
    }

    compileOnly 'org.projectlombok:lombok:1.18.24'
    annotationProcessor 'org.projectlombok:lombok:1.18.24'
    testCompileOnly 'org.projectlombok:lombok:1.18.24'
    testAnnotationProcessor 'org.projectlombok:lombok:1.18.24'

    implementation project(':telegram')
    implementation project(':youtubedl')
}

extraJavaModuleInfo {
    automaticModule('jcommander-1.82.jar', 'com.beust.jcommander')
    automaticModule('slf4j-reload4j-1.7.36.jar', 'org.slf4j.reload4j')
    automaticModule('reload4j-1.2.21.jar', 'ch.qos.reload4j')
    automaticModule('javatuples-1.2.jar', 'org.javatuples')
}

application {
    mainModule = 'telepodcast.app'
    mainClass = 'com.eugene_andrienko.telepodcast.TelePodcast'
}

jar {
    Map<String, Object> attributes = new HashMap<>()
    attributes.put('Main-Class', 'com.eugene_andrienko.telepodcast.TelePodcast')
    attributes.put('Implementation-Title', 'Telepodcast')
    attributes.put('Implementation-Version', archiveVersion)
    manifest.attributes(attributes)
    archivesBaseName = 'telepodcast'

    duplicatesStrategy = DuplicatesStrategy.EXCLUDE

    from {
        configurations.runtimeClasspath.collect {
            it.isDirectory() ? it : zipTree(it)
        }
    }
}

test {
    useJUnitPlatform()
    testLogging {
        events "passed", "skipped", "failed"
    }
}
